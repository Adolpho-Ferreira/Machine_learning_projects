{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Carregamento do dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "dataRaw = pd.read_csv('SIGO.csv', header=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataRaw.columns = [\"Nível de Tensão\",\"Circuito\",\"Religamento sem sucesso ou com sucesso\",\"Clima\",\"Regional (Região do Estado de SP)\",\"Data de Energização\",\"Mês do Desligamento\",\"Período do Dia do Desligamento\", \"Causa\"] \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Nível de Tensão</th>\n",
       "      <th>Circuito</th>\n",
       "      <th>Religamento sem sucesso ou com sucesso</th>\n",
       "      <th>Clima</th>\n",
       "      <th>Regional (Região do Estado de SP)</th>\n",
       "      <th>Data de Energização</th>\n",
       "      <th>Mês do Desligamento</th>\n",
       "      <th>Período do Dia do Desligamento</th>\n",
       "      <th>Causa</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>230</td>\n",
       "      <td>C2</td>\n",
       "      <td>Relig. Sem sucesso</td>\n",
       "      <td>Chuvoso com raios</td>\n",
       "      <td>CABREÚVA</td>\n",
       "      <td>09/03/2011</td>\n",
       "      <td>janeiro</td>\n",
       "      <td>Tarde</td>\n",
       "      <td>Descarga</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>138</td>\n",
       "      <td>C1</td>\n",
       "      <td>Relig. Sem sucesso</td>\n",
       "      <td>Chuvoso sem raios</td>\n",
       "      <td>CABREÚVA</td>\n",
       "      <td>09/03/2011</td>\n",
       "      <td>janeiro</td>\n",
       "      <td>Tarde</td>\n",
       "      <td>Descarga</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>88</td>\n",
       "      <td>C1</td>\n",
       "      <td>Relig. Com sucesso</td>\n",
       "      <td>Chuvoso sem raios</td>\n",
       "      <td>TAUBATÉ</td>\n",
       "      <td>19/12/2016</td>\n",
       "      <td>janeiro</td>\n",
       "      <td>Tarde</td>\n",
       "      <td>Descarga</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>88</td>\n",
       "      <td>C1</td>\n",
       "      <td>Relig. Com sucesso</td>\n",
       "      <td>Chuvoso sem raios</td>\n",
       "      <td>TAUBATÉ</td>\n",
       "      <td>19/12/2016</td>\n",
       "      <td>janeiro</td>\n",
       "      <td>Tarde</td>\n",
       "      <td>Descarga</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Nível de Tensão Circuito Religamento sem sucesso ou com sucesso  \\\n",
       "0              230       C2                     Relig. Sem sucesso   \n",
       "1              138       C1                     Relig. Sem sucesso   \n",
       "2               88       C1                     Relig. Com sucesso   \n",
       "3               88       C1                     Relig. Com sucesso   \n",
       "\n",
       "               Clima Regional (Região do Estado de SP) Data de Energização  \\\n",
       "0  Chuvoso com raios                          CABREÚVA          09/03/2011   \n",
       "1  Chuvoso sem raios                          CABREÚVA          09/03/2011   \n",
       "2  Chuvoso sem raios                           TAUBATÉ          19/12/2016   \n",
       "3  Chuvoso sem raios                           TAUBATÉ          19/12/2016   \n",
       "\n",
       "  Mês do Desligamento Período do Dia do Desligamento     Causa  \n",
       "0             janeiro                          Tarde  Descarga  \n",
       "1             janeiro                          Tarde  Descarga  \n",
       "2             janeiro                          Tarde  Descarga  \n",
       "3             janeiro                          Tarde  Descarga  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = dataRaw.copy()\n",
    "data.head(4)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_3235/1790329626.py:2: FutureWarning: The default value of regex will change from True to False in a future version.\n",
      "  data[\"Religamento sem sucesso ou com sucesso\"] = data[\"Religamento sem sucesso ou com sucesso\"].str.replace(\"Relig. sem sucesso\", \"Relig. Sem sucesso\")\n"
     ]
    }
   ],
   "source": [
    "data[\"Circuito\"] = data[\"Circuito\"].str.replace(\"c1\", \"C1\")\n",
    "data[\"Religamento sem sucesso ou com sucesso\"] = data[\"Religamento sem sucesso ou com sucesso\"].str.replace(\"Relig. sem sucesso\", \"Relig. Sem sucesso\")\n",
    "data[\"Clima\"] = data[\"Clima\"].str.replace(\"Não informado\", \"Não Informado\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Descarga', 'Pássaro', 'Vegetação', 'Cabos Para Raios', 'Queimada'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[\"Causa\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2426, 9)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Balanceando a base pegando amostras da causa \"Descarga\"\n",
    "dfTempDescarga = data[data[\"Causa\"] == 'Descarga'].sample(n=400)\n",
    "data = data[data[\"Causa\"] != 'Descarga']   \n",
    "data = data.append(dfTempDescarga)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(876, 9)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature engineering\n",
    "\n",
    "Data prep desenvolvido com duas abordagens:\n",
    "- Dummy das variáveis feito de maneira manual\n",
    "- One hot encoder"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dummy da base manual \n",
    "\n",
    "Data prep com dummy manualmente em cada feature\n",
    "<b>Circuito:</b>\n",
    "\n",
    "    Dummy por circuito\n",
    "\n",
    "<b>Religamento sem sucesso ou com sucesso:</b>\n",
    "\n",
    "    Relig. Sem sucesso = 0\n",
    "    Relig. Com sucesso = 1\n",
    "\n",
    "<b>Clima:</b>\n",
    "\n",
    "    Dummy por tipo de clima\n",
    "    \n",
    "<b>Regional (Região do Estado de SP):</b>\n",
    "\n",
    "    Dummy por cidade\n",
    "    \n",
    "<b>Data de Energização:</b>\n",
    "\n",
    "    Dummy Por ano\n",
    "    \n",
    "<b>Mês do Desligamento:</b>\n",
    "\n",
    "    Por numero do mês\n",
    "    \n",
    "<b>Período do Dia do Desligamento:</b>\n",
    "\n",
    "    Dummy por período"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dummy de \"Circuito\"\n",
    "data = pd.get_dummies(data, prefix = \"Circuito_\", columns = [\"Circuito\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Agrupamento entre religamento com sucesso ou sem sucesso e dummy\n",
    "replaceValues = {'Relig. Bloqueado': 'Relig. Sem sucesso' ,\n",
    "                 'Relig. Não tem': 'Relig. Sem sucesso'}\n",
    "\n",
    "data = data.replace({\"Religamento sem sucesso ou com sucesso\": replaceValues}) \n",
    "data = pd.get_dummies(data, prefix=\"Religamento_\", columns=['Religamento sem sucesso ou com sucesso'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dummy de \"Clima\"\n",
    "data = pd.get_dummies(data, prefix=\"Clima_\", columns=['Clima'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dummy de \"Regional (Região do Estado de SP)\"\n",
    "data = pd.get_dummies(data, prefix=\"Regional (Região do Estado de SP)_\", columns=[\"Regional (Região do Estado de SP)\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# replaceValuesMonths = {'janeiro':1, \n",
    "#                      'fevereiro':2, \n",
    "#                      'março':3, \n",
    "#                      'abril':4,\n",
    "#                      'maio':5, \n",
    "#                      'junho':6, \n",
    "#                      'julho':7,\n",
    "#                      'agosto':8, \n",
    "#                      'setembro':9, \n",
    "#                      'outubro':10, \n",
    "#                      'novembro':11, \n",
    "#                      'dezembro':12}\n",
    "\n",
    "# data = data.replace({\"Mês do Desligamento\": replaceValuesMonths}) \n",
    "\n",
    "data = pd.get_dummies(data, prefix=\"Mês do Desligamento_\", columns=[\"Mês do Desligamento\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "data[\"Data de Energização\"] = pd.to_datetime(data[\"Data de Energização\"])\n",
    "data[\"Data de Energização\"] = data[\"Data de Energização\"].dt.year\n",
    "data = pd.get_dummies(data, prefix = \"Data de Energização_\", columns=[\"Data de Energização\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.get_dummies(data, prefix=\"Período do Dia do Desligamento_\", columns=[\"Período do Dia do Desligamento\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# replaceValuesCausa = {'Descarga':1,\n",
    "#                       'Pássaro':2, \n",
    "#                       'Vegetação':3, \n",
    "#                       'Cabos Para Raios':4,\n",
    "#                       'Queimada':5}\n",
    "\n",
    "# data = data.replace({\"Causa\": replaceValuesCausa}) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Nível de Tensão</th>\n",
       "      <th>Causa</th>\n",
       "      <th>Circuito__C1</th>\n",
       "      <th>Circuito__C2</th>\n",
       "      <th>Circuito__C3</th>\n",
       "      <th>Circuito__C4</th>\n",
       "      <th>Circuito__C5</th>\n",
       "      <th>Religamento__Relig. Com sucesso</th>\n",
       "      <th>Religamento__Relig. Não informado</th>\n",
       "      <th>Religamento__Relig. Sem sucesso</th>\n",
       "      <th>Clima__Bom sem raios</th>\n",
       "      <th>Clima__Chuvoso com raios</th>\n",
       "      <th>Clima__Chuvoso sem raios</th>\n",
       "      <th>Clima__Nublado</th>\n",
       "      <th>Clima__Não Informado</th>\n",
       "      <th>Clima__Ventos Fortes</th>\n",
       "      <th>Regional (Região do Estado de SP)__BAURU</th>\n",
       "      <th>Regional (Região do Estado de SP)__CABREÚVA</th>\n",
       "      <th>Regional (Região do Estado de SP)__SÃO PAULO</th>\n",
       "      <th>Regional (Região do Estado de SP)__TAUBATÉ</th>\n",
       "      <th>Mês do Desligamento__abril</th>\n",
       "      <th>Mês do Desligamento__agosto</th>\n",
       "      <th>Mês do Desligamento__dezembro</th>\n",
       "      <th>Mês do Desligamento__fevereiro</th>\n",
       "      <th>Mês do Desligamento__janeiro</th>\n",
       "      <th>Mês do Desligamento__julho</th>\n",
       "      <th>Mês do Desligamento__junho</th>\n",
       "      <th>Mês do Desligamento__maio</th>\n",
       "      <th>Mês do Desligamento__março</th>\n",
       "      <th>Mês do Desligamento__novembro</th>\n",
       "      <th>Mês do Desligamento__outubro</th>\n",
       "      <th>Mês do Desligamento__setembro</th>\n",
       "      <th>Data de Energização__1970</th>\n",
       "      <th>Data de Energização__1978</th>\n",
       "      <th>Data de Energização__1980</th>\n",
       "      <th>Data de Energização__1984</th>\n",
       "      <th>Data de Energização__1990</th>\n",
       "      <th>Data de Energização__1991</th>\n",
       "      <th>Data de Energização__1993</th>\n",
       "      <th>Data de Energização__2000</th>\n",
       "      <th>Data de Energização__2006</th>\n",
       "      <th>Data de Energização__2010</th>\n",
       "      <th>Data de Energização__2011</th>\n",
       "      <th>Data de Energização__2015</th>\n",
       "      <th>Data de Energização__2016</th>\n",
       "      <th>Período do Dia do Desligamento__Madrugada</th>\n",
       "      <th>Período do Dia do Desligamento__Manhã</th>\n",
       "      <th>Período do Dia do Desligamento__Noite</th>\n",
       "      <th>Período do Dia do Desligamento__Tarde</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>138</td>\n",
       "      <td>Pássaro</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>138</td>\n",
       "      <td>Vegetação</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>138</td>\n",
       "      <td>Pássaro</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>138</td>\n",
       "      <td>Pássaro</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125</th>\n",
       "      <td>138</td>\n",
       "      <td>Pássaro</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Nível de Tensão      Causa  Circuito__C1  Circuito__C2  Circuito__C3  \\\n",
       "39               138    Pássaro             1             0             0   \n",
       "98               138  Vegetação             1             0             0   \n",
       "122              138    Pássaro             1             0             0   \n",
       "124              138    Pássaro             1             0             0   \n",
       "125              138    Pássaro             0             1             0   \n",
       "\n",
       "     Circuito__C4  Circuito__C5  Religamento__Relig. Com sucesso  \\\n",
       "39              0             0                                1   \n",
       "98              0             0                                1   \n",
       "122             0             0                                1   \n",
       "124             0             0                                0   \n",
       "125             0             0                                0   \n",
       "\n",
       "     Religamento__Relig. Não informado  Religamento__Relig. Sem sucesso  \\\n",
       "39                                   0                                0   \n",
       "98                                   0                                0   \n",
       "122                                  0                                0   \n",
       "124                                  0                                1   \n",
       "125                                  0                                1   \n",
       "\n",
       "     Clima__Bom sem raios  Clima__Chuvoso com raios  Clima__Chuvoso sem raios  \\\n",
       "39                      0                         0                         1   \n",
       "98                      1                         0                         0   \n",
       "122                     0                         0                         0   \n",
       "124                     0                         0                         0   \n",
       "125                     1                         0                         0   \n",
       "\n",
       "     Clima__Nublado  Clima__Não Informado  Clima__Ventos Fortes  \\\n",
       "39                0                     0                     0   \n",
       "98                0                     0                     0   \n",
       "122               1                     0                     0   \n",
       "124               0                     1                     0   \n",
       "125               0                     0                     0   \n",
       "\n",
       "     Regional (Região do Estado de SP)__BAURU  \\\n",
       "39                                          0   \n",
       "98                                          0   \n",
       "122                                         0   \n",
       "124                                         0   \n",
       "125                                         0   \n",
       "\n",
       "     Regional (Região do Estado de SP)__CABREÚVA  \\\n",
       "39                                             1   \n",
       "98                                             1   \n",
       "122                                            1   \n",
       "124                                            1   \n",
       "125                                            1   \n",
       "\n",
       "     Regional (Região do Estado de SP)__SÃO PAULO  \\\n",
       "39                                              0   \n",
       "98                                              0   \n",
       "122                                             0   \n",
       "124                                             0   \n",
       "125                                             0   \n",
       "\n",
       "     Regional (Região do Estado de SP)__TAUBATÉ  Mês do Desligamento__abril  \\\n",
       "39                                            0                           0   \n",
       "98                                            0                           0   \n",
       "122                                           0                           1   \n",
       "124                                           0                           1   \n",
       "125                                           0                           1   \n",
       "\n",
       "     Mês do Desligamento__agosto  Mês do Desligamento__dezembro  \\\n",
       "39                             0                              0   \n",
       "98                             0                              0   \n",
       "122                            0                              0   \n",
       "124                            0                              0   \n",
       "125                            0                              0   \n",
       "\n",
       "     Mês do Desligamento__fevereiro  Mês do Desligamento__janeiro  \\\n",
       "39                                1                             0   \n",
       "98                                0                             0   \n",
       "122                               0                             0   \n",
       "124                               0                             0   \n",
       "125                               0                             0   \n",
       "\n",
       "     Mês do Desligamento__julho  Mês do Desligamento__junho  \\\n",
       "39                            0                           0   \n",
       "98                            0                           0   \n",
       "122                           0                           0   \n",
       "124                           0                           0   \n",
       "125                           0                           0   \n",
       "\n",
       "     Mês do Desligamento__maio  Mês do Desligamento__março  \\\n",
       "39                           0                           0   \n",
       "98                           0                           1   \n",
       "122                          0                           0   \n",
       "124                          0                           0   \n",
       "125                          0                           0   \n",
       "\n",
       "     Mês do Desligamento__novembro  Mês do Desligamento__outubro  \\\n",
       "39                               0                             0   \n",
       "98                               0                             0   \n",
       "122                              0                             0   \n",
       "124                              0                             0   \n",
       "125                              0                             0   \n",
       "\n",
       "     Mês do Desligamento__setembro  Data de Energização__1970  \\\n",
       "39                               0                          0   \n",
       "98                               0                          0   \n",
       "122                              0                          0   \n",
       "124                              0                          0   \n",
       "125                              0                          0   \n",
       "\n",
       "     Data de Energização__1978  Data de Energização__1980  \\\n",
       "39                           0                          0   \n",
       "98                           0                          0   \n",
       "122                          0                          0   \n",
       "124                          0                          0   \n",
       "125                          0                          0   \n",
       "\n",
       "     Data de Energização__1984  Data de Energização__1990  \\\n",
       "39                           0                          0   \n",
       "98                           0                          0   \n",
       "122                          0                          0   \n",
       "124                          0                          0   \n",
       "125                          0                          0   \n",
       "\n",
       "     Data de Energização__1991  Data de Energização__1993  \\\n",
       "39                           0                          0   \n",
       "98                           0                          0   \n",
       "122                          0                          0   \n",
       "124                          0                          0   \n",
       "125                          0                          0   \n",
       "\n",
       "     Data de Energização__2000  Data de Energização__2006  \\\n",
       "39                           1                          0   \n",
       "98                           0                          0   \n",
       "122                          1                          0   \n",
       "124                          0                          0   \n",
       "125                          1                          0   \n",
       "\n",
       "     Data de Energização__2010  Data de Energização__2011  \\\n",
       "39                           0                          0   \n",
       "98                           0                          1   \n",
       "122                          0                          0   \n",
       "124                          0                          1   \n",
       "125                          0                          0   \n",
       "\n",
       "     Data de Energização__2015  Data de Energização__2016  \\\n",
       "39                           0                          0   \n",
       "98                           0                          0   \n",
       "122                          0                          0   \n",
       "124                          0                          0   \n",
       "125                          0                          0   \n",
       "\n",
       "     Período do Dia do Desligamento__Madrugada  \\\n",
       "39                                           0   \n",
       "98                                           0   \n",
       "122                                          1   \n",
       "124                                          1   \n",
       "125                                          1   \n",
       "\n",
       "     Período do Dia do Desligamento__Manhã  \\\n",
       "39                                       0   \n",
       "98                                       1   \n",
       "122                                      0   \n",
       "124                                      0   \n",
       "125                                      0   \n",
       "\n",
       "     Período do Dia do Desligamento__Noite  \\\n",
       "39                                       1   \n",
       "98                                       0   \n",
       "122                                      0   \n",
       "124                                      0   \n",
       "125                                      0   \n",
       "\n",
       "     Período do Dia do Desligamento__Tarde  \n",
       "39                                       0  \n",
       "98                                       0  \n",
       "122                                      0  \n",
       "124                                      0  \n",
       "125                                      0  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.set_option('display.max_columns', 100)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = data.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalizar dados\n",
    "# data = data.apply(pd.to_numeric)\n",
    "# from sklearn import preprocessing\n",
    "\n",
    "# x = data.values #returns a numpy array\n",
    "# min_max_scaler = preprocessing.MinMaxScaler()\n",
    "# x_scaled = min_max_scaler.fit_transform(x)\n",
    "# data = pd.DataFrame(x_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Voltar com nomes ds colunas\n",
    "# data.columns = ['Nível de Tensão',\n",
    "#  'Causa',\n",
    "#  'Circuito__C1',\n",
    "#  'Circuito__C2',\n",
    "#  'Circuito__C3',\n",
    "#  'Circuito__C4',\n",
    "#  'Circuito__C5',\n",
    "#  'Religamento__Relig. Com sucesso',\n",
    "#  'Religamento__Relig. Não informado',\n",
    "#  'Religamento__Relig. Sem sucesso',\n",
    "#  'Clima__Bom sem raios',\n",
    "#  'Clima__Chuvoso com raios',\n",
    "#  'Clima__Chuvoso sem raios',\n",
    "#  'Clima__Nublado',\n",
    "#  'Clima__Não Informado',\n",
    "#  'Clima__Ventos Fortes',\n",
    "#  'Regional (Região do Estado de SP)__BAURU',\n",
    "#  'Regional (Região do Estado de SP)__CABREÚVA',\n",
    "#  'Regional (Região do Estado de SP)__SÃO PAULO',\n",
    "#  'Regional (Região do Estado de SP)__TAUBATÉ',\n",
    "#  'Mês do Desligamento__abril',\n",
    "#  'Mês do Desligamento__agosto',\n",
    "#  'Mês do Desligamento__dezembro',\n",
    "#  'Mês do Desligamento__fevereiro',\n",
    "#  'Mês do Desligamento__janeiro',\n",
    "#  'Mês do Desligamento__julho',\n",
    "#  'Mês do Desligamento__junho',\n",
    "#  'Mês do Desligamento__maio',\n",
    "#  'Mês do Desligamento__março',\n",
    "#  'Mês do Desligamento__novembro',\n",
    "#  'Mês do Desligamento__outubro',\n",
    "#  'Mês do Desligamento__setembro',\n",
    "#  'Data de Energização__1970',\n",
    "#  'Data de Energização__1978',\n",
    "#  'Data de Energização__1980',\n",
    "#  'Data de Energização__1984',\n",
    "#  'Data de Energização__1990',\n",
    "#  'Data de Energização__1991',\n",
    "#  'Data de Energização__1993',\n",
    "#  'Data de Energização__2000',\n",
    "#  'Data de Energização__2006',\n",
    "#  'Data de Energização__2010',\n",
    "#  'Data de Energização__2011',\n",
    "#  'Data de Energização__2015',\n",
    "#  'Data de Energização__2016',\n",
    "#  'Período do Dia do Desligamento__Madrugada',\n",
    "#  'Período do Dia do Desligamento__Manhã',\n",
    "#  'Período do Dia do Desligamento__Noite',\n",
    "#  'Período do Dia do Desligamento__Tarde']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separar set de entrada e de saida\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "dataTestTrain = data.copy()\n",
    "dfY = pd.get_dummies(dataTestTrain[\"Causa\"])\n",
    "Y_dummy = dfY.values\n",
    "dataTestTrain.pop(\"Causa\")\n",
    "X_dummy = dataTestTrain.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "causaNomes = list(dfY.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Cabos Para Raios', 'Descarga', 'Pássaro', 'Queimada', 'Vegetação']"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "causaNomes "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## One hot encoder \n",
    "\n",
    "Data prep com one hot encoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X shape: :  (876, 23)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "dataset = data.values\n",
    "\n",
    "# split data into X and y\n",
    "X = dataset[:,0:8].astype(str)\n",
    "Y = dataset[:,8].astype(str)\n",
    "\n",
    "# encode string input values as integers\n",
    "encoded_x = None\n",
    "for i in range(0, X.shape[1]):\n",
    "    label_encoder = LabelEncoder()\n",
    "    feature = label_encoder.fit_transform(X[:,i])\n",
    "    feature = feature.reshape(X.shape[0], 1)\n",
    "    onehot_encoder = OneHotEncoder(sparse=False, categories='auto')\n",
    "    feature = onehot_encoder.fit_transform(feature)\n",
    "    if encoded_x is None:\n",
    "        encoded_x = feature\n",
    "    else:\n",
    "        encoded_x = np.concatenate((encoded_x, feature), axis=1)\n",
    "print(\"X shape: : \", encoded_x.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-01-29 19:11:21.194184: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-01-29 19:11:21.194199: I tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Y shape: :  (876, 2)\n",
      "[[1. 0.]\n",
      " [1. 0.]\n",
      " [1. 0.]\n",
      " ...\n",
      " [1. 0.]\n",
      " [1. 0.]\n",
      " [1. 0.]]\n"
     ]
    }
   ],
   "source": [
    "from keras.utils import np_utils\n",
    "\n",
    "# encode string class values as integers\n",
    "#print(Y)\n",
    "label_encoder = LabelEncoder()\n",
    "label_encoder = label_encoder.fit(Y)\n",
    "label_encoded_output = label_encoder.transform(Y)\n",
    "label_encoded_y = np_utils.to_categorical(label_encoded_output)\n",
    "print(\"Y shape: : \", label_encoded_y.shape)\n",
    "print(label_encoded_y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train and test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Slit do dataset em base de treino e teste, com base em uma das duas abodagens feita anterioremente\n",
    "# Dummy : X_dummy, Y_dummy\n",
    "# Encoder: encoded_x, label_encoded_y\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X_dummy, Y_dummy, test_size = 0.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape X treino (657, 48)\n",
      "Shape Y treino (657, 5)\n",
      "Shape X teste (219, 48)\n",
      "Shape Y teste (219, 5)\n"
     ]
    }
   ],
   "source": [
    "print(\"Shape X treino\", X_train.shape)\n",
    "print(\"Shape Y treino\", Y_train.shape)\n",
    "\n",
    "print(\"Shape X teste\", X_test.shape)\n",
    "print(\"Shape Y teste\", Y_test.shape)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-01-29 19:11:22.870108: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:939] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-01-29 19:11:22.870777: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\n",
      "2022-01-29 19:11:22.870888: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcublas.so.11'; dlerror: libcublas.so.11: cannot open shared object file: No such file or directory\n",
      "2022-01-29 19:11:22.870971: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcublasLt.so.11'; dlerror: libcublasLt.so.11: cannot open shared object file: No such file or directory\n",
      "2022-01-29 19:11:22.871055: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcufft.so.10'; dlerror: libcufft.so.10: cannot open shared object file: No such file or directory\n",
      "2022-01-29 19:11:22.871137: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcurand.so.10'; dlerror: libcurand.so.10: cannot open shared object file: No such file or directory\n",
      "2022-01-29 19:11:22.871217: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcusolver.so.11'; dlerror: libcusolver.so.11: cannot open shared object file: No such file or directory\n",
      "2022-01-29 19:11:22.871296: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcusparse.so.11'; dlerror: libcusparse.so.11: cannot open shared object file: No such file or directory\n",
      "2022-01-29 19:11:22.871378: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcudnn.so.8'; dlerror: libcudnn.so.8: cannot open shared object file: No such file or directory\n",
      "2022-01-29 19:11:22.871392: W tensorflow/core/common_runtime/gpu/gpu_device.cc:1850] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.\n",
      "Skipping registering GPU devices...\n",
      "2022-01-29 19:11:22.872095: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras import optimizers\n",
    "from keras.callbacks import EarlyStopping\n",
    "\n",
    "\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Dense(50, input_dim = 48, activation = 'sigmoid'))\n",
    "model.add(Dense(30, activation='sigmoid'))\n",
    "model.add(Dense(5, activation = 'softmax'))\n",
    "#optimizer = optimizers.sgd(lr = 0.001)\n",
    "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])\n",
    "\n",
    "\n",
    "                                                                                           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200\n",
      "21/21 [==============================] - 0s 5ms/step - loss: 1.6365 - accuracy: 0.2085 - val_loss: 1.4289 - val_accuracy: 0.5023\n",
      "Epoch 2/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 1.4066 - accuracy: 0.4414 - val_loss: 1.2891 - val_accuracy: 0.5023\n",
      "Epoch 3/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 1.3623 - accuracy: 0.4414 - val_loss: 1.2700 - val_accuracy: 0.5023\n",
      "Epoch 4/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 1.3531 - accuracy: 0.4414 - val_loss: 1.2588 - val_accuracy: 0.5023\n",
      "Epoch 5/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 1.3362 - accuracy: 0.4414 - val_loss: 1.2416 - val_accuracy: 0.5023\n",
      "Epoch 6/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 1.3118 - accuracy: 0.4414 - val_loss: 1.2214 - val_accuracy: 0.5023\n",
      "Epoch 7/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 1.2847 - accuracy: 0.4414 - val_loss: 1.1925 - val_accuracy: 0.5023\n",
      "Epoch 8/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 1.2456 - accuracy: 0.5693 - val_loss: 1.1656 - val_accuracy: 0.5845\n",
      "Epoch 9/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 1.2104 - accuracy: 0.5723 - val_loss: 1.1508 - val_accuracy: 0.5114\n",
      "Epoch 10/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 1.1659 - accuracy: 0.5677 - val_loss: 1.0998 - val_accuracy: 0.5525\n",
      "Epoch 11/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 1.1348 - accuracy: 0.5753 - val_loss: 1.0609 - val_accuracy: 0.5799\n",
      "Epoch 12/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 1.0939 - accuracy: 0.5906 - val_loss: 1.0209 - val_accuracy: 0.6164\n",
      "Epoch 13/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 1.0565 - accuracy: 0.6195 - val_loss: 1.0451 - val_accuracy: 0.5662\n",
      "Epoch 14/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 1.0259 - accuracy: 0.6210 - val_loss: 0.9833 - val_accuracy: 0.6119\n",
      "Epoch 15/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.9984 - accuracy: 0.6286 - val_loss: 0.9297 - val_accuracy: 0.6621\n",
      "Epoch 16/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.9697 - accuracy: 0.6377 - val_loss: 1.0142 - val_accuracy: 0.5890\n",
      "Epoch 17/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.9441 - accuracy: 0.6484 - val_loss: 0.8719 - val_accuracy: 0.6712\n",
      "Epoch 18/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.9151 - accuracy: 0.6560 - val_loss: 0.8493 - val_accuracy: 0.6804\n",
      "Epoch 19/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.8903 - accuracy: 0.6697 - val_loss: 0.8321 - val_accuracy: 0.6849\n",
      "Epoch 20/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.8647 - accuracy: 0.6682 - val_loss: 0.7860 - val_accuracy: 0.6941\n",
      "Epoch 21/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.8412 - accuracy: 0.6804 - val_loss: 0.8128 - val_accuracy: 0.6986\n",
      "Epoch 22/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.8239 - accuracy: 0.6925 - val_loss: 0.7149 - val_accuracy: 0.7808\n",
      "Epoch 23/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.7991 - accuracy: 0.7184 - val_loss: 0.6818 - val_accuracy: 0.8037\n",
      "Epoch 24/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.7773 - accuracy: 0.7352 - val_loss: 0.7344 - val_accuracy: 0.8128\n",
      "Epoch 25/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.7585 - accuracy: 0.7534 - val_loss: 0.6587 - val_accuracy: 0.8356\n",
      "Epoch 26/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.7262 - accuracy: 0.7717 - val_loss: 0.6136 - val_accuracy: 0.8493\n",
      "Epoch 27/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.7126 - accuracy: 0.7732 - val_loss: 0.5962 - val_accuracy: 0.8539\n",
      "Epoch 28/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.6936 - accuracy: 0.7793 - val_loss: 0.5680 - val_accuracy: 0.8539\n",
      "Epoch 29/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.6903 - accuracy: 0.7778 - val_loss: 0.5678 - val_accuracy: 0.8539\n",
      "Epoch 30/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.6610 - accuracy: 0.7945 - val_loss: 0.5446 - val_accuracy: 0.8676\n",
      "Epoch 31/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.6469 - accuracy: 0.7884 - val_loss: 0.5233 - val_accuracy: 0.8813\n",
      "Epoch 32/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.6387 - accuracy: 0.7960 - val_loss: 0.5890 - val_accuracy: 0.8402\n",
      "Epoch 33/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.6448 - accuracy: 0.7945 - val_loss: 0.4972 - val_accuracy: 0.8904\n",
      "Epoch 34/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.6232 - accuracy: 0.8052 - val_loss: 0.4943 - val_accuracy: 0.8858\n",
      "Epoch 35/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.6132 - accuracy: 0.7991 - val_loss: 0.5467 - val_accuracy: 0.8447\n",
      "Epoch 36/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5981 - accuracy: 0.8052 - val_loss: 0.5090 - val_accuracy: 0.8721\n",
      "Epoch 37/200\n",
      "21/21 [==============================] - 0s 2ms/step - loss: 0.5892 - accuracy: 0.8113 - val_loss: 0.4918 - val_accuracy: 0.8767\n",
      "Epoch 38/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5850 - accuracy: 0.8021 - val_loss: 0.4539 - val_accuracy: 0.8904\n",
      "Epoch 39/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5802 - accuracy: 0.8143 - val_loss: 0.4603 - val_accuracy: 0.8858\n",
      "Epoch 40/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5737 - accuracy: 0.8082 - val_loss: 0.5025 - val_accuracy: 0.8539\n",
      "Epoch 41/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5607 - accuracy: 0.8082 - val_loss: 0.5026 - val_accuracy: 0.8630\n",
      "Epoch 42/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5666 - accuracy: 0.8158 - val_loss: 0.4434 - val_accuracy: 0.8904\n",
      "Epoch 43/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5518 - accuracy: 0.8280 - val_loss: 0.4522 - val_accuracy: 0.8950\n",
      "Epoch 44/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5559 - accuracy: 0.8250 - val_loss: 0.4281 - val_accuracy: 0.8950\n",
      "Epoch 45/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5438 - accuracy: 0.8250 - val_loss: 0.4298 - val_accuracy: 0.8950\n",
      "Epoch 46/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5357 - accuracy: 0.8311 - val_loss: 0.4107 - val_accuracy: 0.8995\n",
      "Epoch 47/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5475 - accuracy: 0.8143 - val_loss: 0.4606 - val_accuracy: 0.8676\n",
      "Epoch 48/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5444 - accuracy: 0.8326 - val_loss: 0.4146 - val_accuracy: 0.8904\n",
      "Epoch 49/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5467 - accuracy: 0.8219 - val_loss: 0.4158 - val_accuracy: 0.8995\n",
      "Epoch 50/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5308 - accuracy: 0.8311 - val_loss: 0.4335 - val_accuracy: 0.8858\n",
      "Epoch 51/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5172 - accuracy: 0.8341 - val_loss: 0.4321 - val_accuracy: 0.8858\n",
      "Epoch 52/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5267 - accuracy: 0.8371 - val_loss: 0.4277 - val_accuracy: 0.8904\n",
      "Epoch 53/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5142 - accuracy: 0.8447 - val_loss: 0.4060 - val_accuracy: 0.9041\n",
      "Epoch 54/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5070 - accuracy: 0.8463 - val_loss: 0.3980 - val_accuracy: 0.8950\n",
      "Epoch 55/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5036 - accuracy: 0.8417 - val_loss: 0.3995 - val_accuracy: 0.9087\n",
      "Epoch 56/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5066 - accuracy: 0.8417 - val_loss: 0.3909 - val_accuracy: 0.8995\n",
      "Epoch 57/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5032 - accuracy: 0.8463 - val_loss: 0.4027 - val_accuracy: 0.9041\n",
      "Epoch 58/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4981 - accuracy: 0.8508 - val_loss: 0.3968 - val_accuracy: 0.8995\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 59/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5025 - accuracy: 0.8341 - val_loss: 0.4416 - val_accuracy: 0.8767\n",
      "Epoch 60/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4983 - accuracy: 0.8463 - val_loss: 0.3978 - val_accuracy: 0.8904\n",
      "Epoch 61/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4903 - accuracy: 0.8402 - val_loss: 0.4121 - val_accuracy: 0.9087\n",
      "Epoch 62/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4893 - accuracy: 0.8493 - val_loss: 0.3954 - val_accuracy: 0.9041\n",
      "Epoch 63/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4876 - accuracy: 0.8447 - val_loss: 0.3904 - val_accuracy: 0.8904\n",
      "Epoch 64/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.5235 - accuracy: 0.8128 - val_loss: 0.3807 - val_accuracy: 0.8995\n",
      "Epoch 65/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4997 - accuracy: 0.8326 - val_loss: 0.5630 - val_accuracy: 0.7945\n",
      "Epoch 66/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4987 - accuracy: 0.8402 - val_loss: 0.4594 - val_accuracy: 0.8584\n",
      "Epoch 67/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4861 - accuracy: 0.8326 - val_loss: 0.4038 - val_accuracy: 0.8995\n",
      "Epoch 68/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4881 - accuracy: 0.8447 - val_loss: 0.3942 - val_accuracy: 0.9087\n",
      "Epoch 69/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4783 - accuracy: 0.8478 - val_loss: 0.4095 - val_accuracy: 0.9132\n",
      "Epoch 70/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4728 - accuracy: 0.8478 - val_loss: 0.3816 - val_accuracy: 0.8995\n",
      "Epoch 71/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4666 - accuracy: 0.8524 - val_loss: 0.3948 - val_accuracy: 0.8995\n",
      "Epoch 72/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4745 - accuracy: 0.8493 - val_loss: 0.3930 - val_accuracy: 0.9041\n",
      "Epoch 73/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4711 - accuracy: 0.8524 - val_loss: 0.4495 - val_accuracy: 0.8721\n",
      "Epoch 74/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4714 - accuracy: 0.8478 - val_loss: 0.4134 - val_accuracy: 0.8995\n",
      "Epoch 75/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4638 - accuracy: 0.8600 - val_loss: 0.4234 - val_accuracy: 0.8813\n",
      "Epoch 76/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4661 - accuracy: 0.8463 - val_loss: 0.4684 - val_accuracy: 0.8630\n",
      "Epoch 77/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4708 - accuracy: 0.8493 - val_loss: 0.4288 - val_accuracy: 0.8904\n",
      "Epoch 78/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4722 - accuracy: 0.8554 - val_loss: 0.3957 - val_accuracy: 0.9041\n",
      "Epoch 79/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4586 - accuracy: 0.8493 - val_loss: 0.4023 - val_accuracy: 0.9087\n",
      "Epoch 80/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4547 - accuracy: 0.8478 - val_loss: 0.3914 - val_accuracy: 0.9087\n",
      "Epoch 81/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4535 - accuracy: 0.8508 - val_loss: 0.3822 - val_accuracy: 0.9041\n",
      "Epoch 82/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4775 - accuracy: 0.8478 - val_loss: 0.4149 - val_accuracy: 0.9041\n",
      "Epoch 83/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4679 - accuracy: 0.8371 - val_loss: 0.4056 - val_accuracy: 0.8995\n",
      "Epoch 84/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4497 - accuracy: 0.8508 - val_loss: 0.3799 - val_accuracy: 0.8995\n",
      "Epoch 85/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4543 - accuracy: 0.8493 - val_loss: 0.3851 - val_accuracy: 0.9041\n",
      "Epoch 86/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4495 - accuracy: 0.8493 - val_loss: 0.3826 - val_accuracy: 0.9041\n",
      "Epoch 87/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4408 - accuracy: 0.8524 - val_loss: 0.3867 - val_accuracy: 0.9041\n",
      "Epoch 88/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4540 - accuracy: 0.8584 - val_loss: 0.3735 - val_accuracy: 0.8995\n",
      "Epoch 89/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4492 - accuracy: 0.8554 - val_loss: 0.3832 - val_accuracy: 0.9041\n",
      "Epoch 90/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4397 - accuracy: 0.8463 - val_loss: 0.3872 - val_accuracy: 0.9041\n",
      "Epoch 91/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4443 - accuracy: 0.8539 - val_loss: 0.4128 - val_accuracy: 0.8995\n",
      "Epoch 92/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4346 - accuracy: 0.8630 - val_loss: 0.3868 - val_accuracy: 0.9087\n",
      "Epoch 93/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4356 - accuracy: 0.8630 - val_loss: 0.4087 - val_accuracy: 0.8950\n",
      "Epoch 94/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4541 - accuracy: 0.8554 - val_loss: 0.4342 - val_accuracy: 0.8858\n",
      "Epoch 95/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4439 - accuracy: 0.8493 - val_loss: 0.3990 - val_accuracy: 0.9041\n",
      "Epoch 96/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4407 - accuracy: 0.8554 - val_loss: 0.3926 - val_accuracy: 0.8950\n",
      "Epoch 97/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4429 - accuracy: 0.8615 - val_loss: 0.3845 - val_accuracy: 0.9041\n",
      "Epoch 98/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4317 - accuracy: 0.8600 - val_loss: 0.3785 - val_accuracy: 0.9132\n",
      "Epoch 99/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4297 - accuracy: 0.8584 - val_loss: 0.3983 - val_accuracy: 0.8995\n",
      "Epoch 100/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4306 - accuracy: 0.8584 - val_loss: 0.4297 - val_accuracy: 0.8813\n",
      "Epoch 101/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4374 - accuracy: 0.8569 - val_loss: 0.4175 - val_accuracy: 0.8995\n",
      "Epoch 102/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4219 - accuracy: 0.8600 - val_loss: 0.4214 - val_accuracy: 0.9041\n",
      "Epoch 103/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4167 - accuracy: 0.8645 - val_loss: 0.3767 - val_accuracy: 0.9041\n",
      "Epoch 104/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4203 - accuracy: 0.8661 - val_loss: 0.4078 - val_accuracy: 0.8995\n",
      "Epoch 105/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4248 - accuracy: 0.8600 - val_loss: 0.4607 - val_accuracy: 0.8813\n",
      "Epoch 106/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4477 - accuracy: 0.8508 - val_loss: 0.3851 - val_accuracy: 0.9041\n",
      "Epoch 107/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4140 - accuracy: 0.8615 - val_loss: 0.4116 - val_accuracy: 0.8995\n",
      "Epoch 108/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4088 - accuracy: 0.8630 - val_loss: 0.3941 - val_accuracy: 0.8950\n",
      "Epoch 109/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4153 - accuracy: 0.8615 - val_loss: 0.3738 - val_accuracy: 0.8995\n",
      "Epoch 110/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4150 - accuracy: 0.8584 - val_loss: 0.4118 - val_accuracy: 0.8950\n",
      "Epoch 111/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4154 - accuracy: 0.8645 - val_loss: 0.4041 - val_accuracy: 0.8950\n",
      "Epoch 112/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4201 - accuracy: 0.8676 - val_loss: 0.3890 - val_accuracy: 0.8995\n",
      "Epoch 113/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4026 - accuracy: 0.8737 - val_loss: 0.3951 - val_accuracy: 0.8950\n",
      "Epoch 114/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4077 - accuracy: 0.8630 - val_loss: 0.4045 - val_accuracy: 0.8995\n",
      "Epoch 115/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4136 - accuracy: 0.8630 - val_loss: 0.4013 - val_accuracy: 0.9041\n",
      "Epoch 116/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4038 - accuracy: 0.8706 - val_loss: 0.4055 - val_accuracy: 0.8995\n",
      "Epoch 117/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4031 - accuracy: 0.8706 - val_loss: 0.4010 - val_accuracy: 0.9087\n",
      "Epoch 118/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4002 - accuracy: 0.8767 - val_loss: 0.4073 - val_accuracy: 0.9041\n",
      "Epoch 119/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3933 - accuracy: 0.8691 - val_loss: 0.3910 - val_accuracy: 0.8950\n",
      "Epoch 120/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4025 - accuracy: 0.8645 - val_loss: 0.4349 - val_accuracy: 0.8858\n",
      "Epoch 121/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4006 - accuracy: 0.8752 - val_loss: 0.4061 - val_accuracy: 0.8995\n",
      "Epoch 122/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3987 - accuracy: 0.8706 - val_loss: 0.4446 - val_accuracy: 0.8904\n",
      "Epoch 123/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3944 - accuracy: 0.8721 - val_loss: 0.4110 - val_accuracy: 0.8995\n",
      "Epoch 124/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3952 - accuracy: 0.8721 - val_loss: 0.3950 - val_accuracy: 0.8904\n",
      "Epoch 125/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4018 - accuracy: 0.8706 - val_loss: 0.3999 - val_accuracy: 0.9087\n",
      "Epoch 126/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3926 - accuracy: 0.8752 - val_loss: 0.3914 - val_accuracy: 0.8950\n",
      "Epoch 127/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3979 - accuracy: 0.8721 - val_loss: 0.3979 - val_accuracy: 0.8995\n",
      "Epoch 128/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3948 - accuracy: 0.8706 - val_loss: 0.3888 - val_accuracy: 0.8995\n",
      "Epoch 129/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3959 - accuracy: 0.8843 - val_loss: 0.4044 - val_accuracy: 0.8950\n",
      "Epoch 130/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3826 - accuracy: 0.8721 - val_loss: 0.4160 - val_accuracy: 0.8858\n",
      "Epoch 131/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3841 - accuracy: 0.8721 - val_loss: 0.3781 - val_accuracy: 0.8950\n",
      "Epoch 132/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3833 - accuracy: 0.8782 - val_loss: 0.3901 - val_accuracy: 0.9087\n",
      "Epoch 133/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3872 - accuracy: 0.8737 - val_loss: 0.4494 - val_accuracy: 0.8904\n",
      "Epoch 134/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.4119 - accuracy: 0.8661 - val_loss: 0.4825 - val_accuracy: 0.8493\n",
      "Epoch 135/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3860 - accuracy: 0.8798 - val_loss: 0.3838 - val_accuracy: 0.8995\n",
      "Epoch 136/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3834 - accuracy: 0.8782 - val_loss: 0.3817 - val_accuracy: 0.9041\n",
      "Epoch 137/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3747 - accuracy: 0.8767 - val_loss: 0.4183 - val_accuracy: 0.8813\n",
      "Epoch 138/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3930 - accuracy: 0.8661 - val_loss: 0.4014 - val_accuracy: 0.8904\n",
      "Epoch 139/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3777 - accuracy: 0.8813 - val_loss: 0.4251 - val_accuracy: 0.8813\n",
      "Epoch 140/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3759 - accuracy: 0.8935 - val_loss: 0.4255 - val_accuracy: 0.8858\n",
      "Epoch 141/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3728 - accuracy: 0.8798 - val_loss: 0.4167 - val_accuracy: 0.8950\n",
      "Epoch 142/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3814 - accuracy: 0.8767 - val_loss: 0.3997 - val_accuracy: 0.8950\n",
      "Epoch 143/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3709 - accuracy: 0.8798 - val_loss: 0.4412 - val_accuracy: 0.8858\n",
      "Epoch 144/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3689 - accuracy: 0.8843 - val_loss: 0.4415 - val_accuracy: 0.8904\n",
      "Epoch 145/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3667 - accuracy: 0.8843 - val_loss: 0.4199 - val_accuracy: 0.8950\n",
      "Epoch 146/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3657 - accuracy: 0.8889 - val_loss: 0.4078 - val_accuracy: 0.8858\n",
      "Epoch 147/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3628 - accuracy: 0.8828 - val_loss: 0.4104 - val_accuracy: 0.8858\n",
      "Epoch 148/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3702 - accuracy: 0.8828 - val_loss: 0.4078 - val_accuracy: 0.8858\n",
      "Epoch 149/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3909 - accuracy: 0.8767 - val_loss: 0.4013 - val_accuracy: 0.8950\n",
      "Epoch 150/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3608 - accuracy: 0.8904 - val_loss: 0.4304 - val_accuracy: 0.8858\n",
      "Epoch 151/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3731 - accuracy: 0.8874 - val_loss: 0.4134 - val_accuracy: 0.8858\n",
      "Epoch 152/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3594 - accuracy: 0.8813 - val_loss: 0.4298 - val_accuracy: 0.8858\n",
      "Epoch 153/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3673 - accuracy: 0.8828 - val_loss: 0.3914 - val_accuracy: 0.9041\n",
      "Epoch 154/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3567 - accuracy: 0.8843 - val_loss: 0.4186 - val_accuracy: 0.8904\n",
      "Epoch 155/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3592 - accuracy: 0.8843 - val_loss: 0.4581 - val_accuracy: 0.8813\n",
      "Epoch 156/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3706 - accuracy: 0.8828 - val_loss: 0.4397 - val_accuracy: 0.8721\n",
      "Epoch 157/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3580 - accuracy: 0.8874 - val_loss: 0.4217 - val_accuracy: 0.8858\n",
      "Epoch 158/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3593 - accuracy: 0.8813 - val_loss: 0.4431 - val_accuracy: 0.8767\n",
      "Epoch 159/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3531 - accuracy: 0.8919 - val_loss: 0.4019 - val_accuracy: 0.8950\n",
      "Epoch 160/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3466 - accuracy: 0.8858 - val_loss: 0.4034 - val_accuracy: 0.9041\n",
      "Epoch 161/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3516 - accuracy: 0.8874 - val_loss: 0.4660 - val_accuracy: 0.8721\n",
      "Epoch 162/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3491 - accuracy: 0.8828 - val_loss: 0.3988 - val_accuracy: 0.8904\n",
      "Epoch 163/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3508 - accuracy: 0.8813 - val_loss: 0.4402 - val_accuracy: 0.8767\n",
      "Epoch 164/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3433 - accuracy: 0.8980 - val_loss: 0.3985 - val_accuracy: 0.9041\n",
      "Epoch 165/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3672 - accuracy: 0.8828 - val_loss: 0.3997 - val_accuracy: 0.9041\n",
      "Epoch 166/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3429 - accuracy: 0.8904 - val_loss: 0.4396 - val_accuracy: 0.8858\n",
      "Epoch 167/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3455 - accuracy: 0.8889 - val_loss: 0.4226 - val_accuracy: 0.8813\n",
      "Epoch 168/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3447 - accuracy: 0.8919 - val_loss: 0.4171 - val_accuracy: 0.8858\n",
      "Epoch 169/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3463 - accuracy: 0.8904 - val_loss: 0.4100 - val_accuracy: 0.8995\n",
      "Epoch 170/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3460 - accuracy: 0.8965 - val_loss: 0.4083 - val_accuracy: 0.8950\n",
      "Epoch 171/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3473 - accuracy: 0.8919 - val_loss: 0.4691 - val_accuracy: 0.8539\n",
      "Epoch 172/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3741 - accuracy: 0.8828 - val_loss: 0.4582 - val_accuracy: 0.8721\n",
      "Epoch 173/200\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3661 - accuracy: 0.8676 - val_loss: 0.4938 - val_accuracy: 0.8630\n",
      "Epoch 174/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3447 - accuracy: 0.8980 - val_loss: 0.4317 - val_accuracy: 0.8676\n",
      "Epoch 175/200\n",
      "21/21 [==============================] - 0s 2ms/step - loss: 0.3602 - accuracy: 0.8782 - val_loss: 0.4713 - val_accuracy: 0.8584\n",
      "Epoch 176/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3359 - accuracy: 0.8965 - val_loss: 0.4219 - val_accuracy: 0.8813\n",
      "Epoch 177/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3373 - accuracy: 0.8965 - val_loss: 0.4401 - val_accuracy: 0.8676\n",
      "Epoch 178/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3380 - accuracy: 0.8935 - val_loss: 0.4401 - val_accuracy: 0.8721\n",
      "Epoch 179/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3457 - accuracy: 0.8935 - val_loss: 0.4629 - val_accuracy: 0.8721\n",
      "Epoch 180/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3360 - accuracy: 0.8858 - val_loss: 0.4019 - val_accuracy: 0.8813\n",
      "Epoch 181/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3323 - accuracy: 0.8919 - val_loss: 0.4491 - val_accuracy: 0.8767\n",
      "Epoch 182/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3367 - accuracy: 0.8935 - val_loss: 0.4198 - val_accuracy: 0.8813\n",
      "Epoch 183/200\n",
      "21/21 [==============================] - 0s 2ms/step - loss: 0.3281 - accuracy: 0.9056 - val_loss: 0.4266 - val_accuracy: 0.8813\n",
      "Epoch 184/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3456 - accuracy: 0.8843 - val_loss: 0.4283 - val_accuracy: 0.8721\n",
      "Epoch 185/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3445 - accuracy: 0.8995 - val_loss: 0.4053 - val_accuracy: 0.8950\n",
      "Epoch 186/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3518 - accuracy: 0.8889 - val_loss: 0.4131 - val_accuracy: 0.8721\n",
      "Epoch 187/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3332 - accuracy: 0.8935 - val_loss: 0.4056 - val_accuracy: 0.8950\n",
      "Epoch 188/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3239 - accuracy: 0.8980 - val_loss: 0.4789 - val_accuracy: 0.8539\n",
      "Epoch 189/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3411 - accuracy: 0.8874 - val_loss: 0.4312 - val_accuracy: 0.8721\n",
      "Epoch 190/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3304 - accuracy: 0.8935 - val_loss: 0.4325 - val_accuracy: 0.8813\n",
      "Epoch 191/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3268 - accuracy: 0.9011 - val_loss: 0.4371 - val_accuracy: 0.8767\n",
      "Epoch 192/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3194 - accuracy: 0.9011 - val_loss: 0.4359 - val_accuracy: 0.8630\n",
      "Epoch 193/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3172 - accuracy: 0.8965 - val_loss: 0.4568 - val_accuracy: 0.8676\n",
      "Epoch 194/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3166 - accuracy: 0.9026 - val_loss: 0.4230 - val_accuracy: 0.8630\n",
      "Epoch 195/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3312 - accuracy: 0.8919 - val_loss: 0.4494 - val_accuracy: 0.8539\n",
      "Epoch 196/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3207 - accuracy: 0.9072 - val_loss: 0.4608 - val_accuracy: 0.8539\n",
      "Epoch 197/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3213 - accuracy: 0.8980 - val_loss: 0.4829 - val_accuracy: 0.8630\n",
      "Epoch 198/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3172 - accuracy: 0.8995 - val_loss: 0.4540 - val_accuracy: 0.8630\n",
      "Epoch 199/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3130 - accuracy: 0.9041 - val_loss: 0.4242 - val_accuracy: 0.8676\n",
      "Epoch 200/200\n",
      "21/21 [==============================] - 0s 1ms/step - loss: 0.3150 - accuracy: 0.9026 - val_loss: 0.4238 - val_accuracy: 0.8858\n"
     ]
    }
   ],
   "source": [
    "epochs = 200\n",
    "history = model.fit(X_train, Y_train, validation_data = (X_test,Y_test), epochs = epochs)                                                                                           \n",
    "                                                                                           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 0s 662us/step - loss: 0.4238 - accuracy: 0.8858\n"
     ]
    }
   ],
   "source": [
    "accr = model.evaluate(X_test,Y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test set\n",
      "  Loss: 0.423821359872818  \n",
      "  Accuracy:  0.8858447670936584\n"
     ]
    }
   ],
   "source": [
    "print(\"Test set\\n  Loss:\", accr[0] ,\" \\n  Accuracy: \",accr[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acurácia:  0.8858447488584474\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "import numpy as np\n",
    "\n",
    "pred = model.predict(X_test)\n",
    "pred = np.argmax(pred,axis=1)\n",
    "y_compare = np.argmax(Y_test,axis=1)\n",
    "score = metrics.accuracy_score(y_compare,pred)\n",
    "print(\"Acurácia: \", score )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix\n",
      "[[  1   0   0   0   1]\n",
      " [  0 107   2   0   1]\n",
      " [  4   3  31   4   1]\n",
      " [  1   1   0  43   2]\n",
      " [  0   3   0   2  12]]\n"
     ]
    }
   ],
   "source": [
    "# confusion matrix\n",
    "cm = confusion_matrix(y_compare, pred)\n",
    "#cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, numpy.newaxis]\n",
    "print('Confusion matrix')\n",
    "print(cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 921.6x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import pyplot\n",
    "import seaborn as sns\n",
    "\n",
    "\n",
    "plt.figure(figsize=(12.8,6))\n",
    "sns.heatmap(cm, \n",
    "            annot=True,\n",
    "            xticklabels=causaNomes, \n",
    "            yticklabels=causaNomes,\n",
    "            cmap=\"Blues\")\n",
    "plt.ylabel('Predicted')\n",
    "plt.xlabel('Actual')\n",
    "plt.title('Confusion matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.17      0.50      0.25         2\n",
      "           1       0.94      0.97      0.96       110\n",
      "           2       0.94      0.72      0.82        43\n",
      "           3       0.88      0.91      0.90        47\n",
      "           4       0.71      0.71      0.71        17\n",
      "\n",
      "    accuracy                           0.89       219\n",
      "   macro avg       0.73      0.76      0.72       219\n",
      "weighted avg       0.90      0.89      0.89       219\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "\n",
    "print(\"Classification report\")\n",
    "print(classification_report(y_compare, pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import pyplot\n",
    "\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# summarize history for loss\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
